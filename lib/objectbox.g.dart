// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_sync_flutter_libs/objectbox_sync_flutter_libs.dart';

import 'ObjectBox/model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(3, 1028974137047872354),
      name: 'Party',
      lastPropertyId: const IdUid(7, 5500193495818654090),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6091705255038676174),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8502944687515635134),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3584896501297269090),
            name: 'size',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8168190879334256525),
            name: 'phoneNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8265851836799662482),
            name: 'timeQuoted',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5500193495818654090),
            name: 'timeAdded',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 7639733328394587700),
      name: 'myTable',
      lastPropertyId: const IdUid(3, 8235619760228020555),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3591896250182657774),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7913464457750292665),
            name: 'tableNumber',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8235619760228020555),
            name: 'state',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(6, 7070368192983474384),
      lastIndexId: const IdUid(2, 3216641991569362167),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        9070991375759217764,
        6541336931039621162,
        9056045383993088491,
        7070368192983474384
      ],
      retiredIndexUids: const [3216641991569362167],
      retiredPropertyUids: const [
        8123659760592865178,
        4339627968343728224,
        4804298527816204121,
        860247414556252008,
        3873068093839183365,
        8396402611567574263,
        7467828056380379891,
        965730541416072895,
        3615049197171583809,
        1972141211005568718,
        7605431256313307188,
        3535150075065647455
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Party: EntityDefinition<Party>(
        model: _entities[0],
        toOneRelations: (Party object) => [],
        toManyRelations: (Party object) => {},
        getId: (Party object) => object.id,
        setId: (Party object, int id) {
          object.id = id;
        },
        objectToFB: (Party object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final sizeOffset = fbb.writeString(object.size);
          final phoneNumberOffset = fbb.writeString(object.phoneNumber);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(3, sizeOffset);
          fbb.addOffset(4, phoneNumberOffset);
          fbb.addInt64(5, object.timeQuoted);
          fbb.addInt64(6, object.timeAdded.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Party(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0),
              DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));

          return object;
        }),
    myTable: EntityDefinition<myTable>(
        model: _entities[1],
        toOneRelations: (myTable object) => [],
        toManyRelations: (myTable object) => {},
        getId: (myTable object) => object.id,
        setId: (myTable object, int id) {
          object.id = id;
        },
        objectToFB: (myTable object, fb.Builder fbb) {
          final stateOffset = fbb.writeString(object.state);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.tableNumber);
          fbb.addOffset(2, stateOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = myTable(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Party] entity fields to define ObjectBox queries.
class Party_ {
  /// see [Party.id]
  static final id = QueryIntegerProperty<Party>(_entities[0].properties[0]);

  /// see [Party.name]
  static final name = QueryStringProperty<Party>(_entities[0].properties[1]);

  /// see [Party.size]
  static final size = QueryStringProperty<Party>(_entities[0].properties[2]);

  /// see [Party.phoneNumber]
  static final phoneNumber =
      QueryStringProperty<Party>(_entities[0].properties[3]);

  /// see [Party.timeQuoted]
  static final timeQuoted =
      QueryIntegerProperty<Party>(_entities[0].properties[4]);

  /// see [Party.timeAdded]
  static final timeAdded =
      QueryIntegerProperty<Party>(_entities[0].properties[5]);
}

/// [myTable] entity fields to define ObjectBox queries.
class myTable_ {
  /// see [myTable.id]
  static final id = QueryIntegerProperty<myTable>(_entities[1].properties[0]);

  /// see [myTable.tableNumber]
  static final tableNumber =
      QueryIntegerProperty<myTable>(_entities[1].properties[1]);

  /// see [myTable.state]
  static final state = QueryStringProperty<myTable>(_entities[1].properties[2]);
}
